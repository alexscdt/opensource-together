---
description:
globs:
alwaysApply: false
---
# Project Use Cases Layer Rules

## Command Pattern (CreateProjectCommand)
```typescript
export class CreateProjectCommand implements ICommand {
  constructor(public readonly props: {
    ownerId: string;
    title: string; 
    shortDescription: string;
    description: string;
    techStacks: {id: string, name: string, iconUrl: string}[];
    externalLinks?: {type: string, url: string}[];
    projectRoles: {
      title: string;
      description: string;
      isFilled: boolean; 
      techStacks: {id: string, name: string, iconUrl: string}[];
    }[];
    octokit: Octokit; // GitHub integration
  }) {}
}
```

## Orchestration Flow (CreateProjectCommandHandler)
```typescript
async execute(command: CreateProjectCommand): Promise<Result<Project, string>> {
  // 1. Business validation
  const existingProject = await this.projectRepo.findByTitle(command.props.title);
  if (existingProject.success) {
    return Result.fail('Project with same title already exists');
  }
  
  // 2. TechStack validation (projet + rÃ´les)
  const allTechStackIds = this.extractAllTechStackIds(command.props);
  const techStacksResult = await this.techStackRepo.findByIds(allTechStackIds);
  if (!techStacksResult.success || techStacksResult.value.length !== allTechStackIds.length) {
    return Result.fail('Tech stacks not found');
  }
  
  // 3. Create & persist Project
  const project = Project.create({...command.props, techStacks: validatedTechStacks});
  const savedProject = await this.projectRepo.create(project.value);
  
  // 4. GitHub repository creation (non-blocking)
  const githubRepo = await this.githubRepository.createGithubRepository(
    {title: savedProject.value.title, description: savedProject.value.description},
    command.props.octokit
  );
  
  if (githubRepo.success) {
    savedProject.value.addExternalLink({type: 'github', url: githubRepo.value.html_url});
    await this.projectRepo.update(savedProject.value.id, savedProject.value);
  }
  
  // 5. Create ProjectRoles (atomic)
  if (command.props.projectRoles.length > 0) {
    const projectRolesResults = await this.createProjectRoles(savedProject.value, command.props.projectRoles);
    savedProject.value.addProjectRoles(projectRolesResults);
  }
  
  return Result.ok(savedProject.value);
}
```

## Query Pattern
```typescript
// FindProjectByIdQuery
export class FindProjectByIdQuery implements IQuery {
  constructor(public readonly id: string) {}
}

@QueryHandler(FindProjectByIdQuery)
export class FindProjectByIdHandler implements IQueryHandler<FindProjectByIdQuery> {
  async execute(query: FindProjectByIdQuery): Promise<Result<Project, string>> {
    return await this.projectRepo.findById(query.id);
  }
}
```

## Port Definitions
```typescript
export const PROJECT_REPOSITORY_PORT = Symbol('ProjectRepository');
export interface ProjectRepositoryPort {
  create(project: Project): Promise<Result<Project, string>>;
  findById(id: string): Promise<Result<Project, string>>;
  findByTitle(title: string): Promise<Result<Project, string>>;
  update(id: string, project: Project): Promise<Result<Project, string>>;
  delete(id: string): Promise<Result<boolean, string>>;
}
```

## Error Handling Strategy
- **Validation errors** : Return Result.fail() with specific message
- **GitHub API failure** : Log but don't fail project creation
- **TechStack not found** : Fail fast - projects need valid stacks
- **ProjectRole creation failure** : Fail entire operation (atomicity)

## Testing Strategy
```typescript
describe('CreateProjectCommandHandler', () => {
  beforeEach(async () => {
    const module = await Test.createTestingModule({
      providers: [
        CreateProjectCommandHandler,
        {provide: PROJECT_REPOSITORY_PORT, useClass: InMemoryProjectRepository},
        {provide: TECHSTACK_REPOSITORY_PORT, useClass: InMemoryTechStackRepository},
        {provide: PROJECT_ROLE_REPOSITORY_PORT, useClass: InMemoryProjectRoleRepository},
        {provide: GITHUB_REPOSITORY_PORT, useClass: MockGithubRepository},
      ],
    }).compile();
  });
  
  // Test success path
  it('should create project with GitHub repo and roles', async () => {
    // Arrange
    await setupValidTechStacks();
    const command = new CreateProjectCommand(getValidProjectProps());
    
    // Act  
    const result = await handler.execute(command);
    
    // Assert
    expect(result.success).toBe(true);
    expect(result.value.toPrimitive().externalLinks).toContainEqual({
      type: 'github', 
      url: expect.stringContaining('github.com')
    });
  });
  
  // Test failure paths
  it('should fail if title already exists', async () => {
    // Arrange existing project + command with same title
    // Act & Assert failure
  });
}
```

## Dependencies & Injection
- **Required repositories** : ProjectRepository, TechStackRepository, ProjectRoleRepository, GithubRepository
- **External APIs** : GitHub via Octokit (injected dans command props)
- **Pattern** : Constructor injection via @Inject() avec les PORT symbols

## Use Case Container
```typescript
// project.use-cases.ts
export const projectUseCases = [
  ...projectQueriesContainer,    // [FindProjectByIdHandler, GetProjectsHandler]
  ...projectCommandsContainer,   // [CreateProjectCommandHandler]
];
```